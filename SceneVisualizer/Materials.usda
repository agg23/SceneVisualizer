#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["GridMaterial", "Material", "RippleMaterial", "ProximityMaterial", "TestPlane"]
    def Material "GridMaterial"
    {
        token outputs:mtlx:surface.connect = </Root/GridMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (768.96094, 74.94922)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 125

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/GridMaterial/IfEqual.outputs:out>
            float inputs:metallic
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (567.9883, 5.5546875)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 129
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:diffuseColor"]
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-526.6211, -152.51953)
            float2 ui:nodegraph:node:size = (133.5, 40)
            int ui:nodegraph:node:stackingOrder = 17
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/GridMaterial/Position.outputs:out>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-373.92188, -129.35156)
            float2 ui:nodegraph:node:size = (115.5, 145)
            int ui:nodegraph:node:stackingOrder = 19
        }

        def Shader "Modulo_Value"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0.1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-528.6719, 28.78125)
            float2 ui:nodegraph:node:size = (172, 53)
            int ui:nodegraph:node:stackingOrder = 137
        }

        def Shader "If_Value"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0.09
            float outputs:out
            float2 ui:nodegraph:node:pos = (-524.23047, 101.53125)
            float2 ui:nodegraph:node:size = (134, 53)
            int ui:nodegraph:node:stackingOrder = 138
        }

        def Shader "Max"
        {
            uniform token info:id = "ND_max_float"
            float inputs:in1.connect = </Root/GridMaterial/ScalarLine.outputs:DrawLine>
            float inputs:in2.connect = </Root/GridMaterial/Max_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (97.82422, -67.55469)
            float2 ui:nodegraph:node:size = (113, 40)
            int ui:nodegraph:node:stackingOrder = 135
        }

        def NodeGraph "ScalarLine"
        {
            float inputs:IfLine = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-553.51953, 132.47266)
                        float2 sizeInSubgraph = (102.5, 53)
                        int stackingOrderInSubgraph = 107
                    }
                }
            )
            float inputs:IfLine.connect = </Root/GridMaterial/If_Value.outputs:out>
            float inputs:ModuloValue = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-569.7422, 54.359375)
                        float2 sizeInSubgraph = (148, 53)
                        int stackingOrderInSubgraph = 104
                    }
                }
            )
            float inputs:ModuloValue.connect = </Root/GridMaterial/Modulo_Value.outputs:out>
            float inputs:PositionScalar = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-571.3867, -21.273438)
                        float2 sizeInSubgraph = (157, 53)
                        int stackingOrderInSubgraph = 106
                    }
                }
            )
            float inputs:PositionScalar.connect = </Root/GridMaterial/Separate3.outputs:outx>
            float outputs:DrawLine.connect = </Root/GridMaterial/ScalarLine/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (-161.60547, -122.72656)
            float2 ui:nodegraph:node:size = (126, 145)
            int ui:nodegraph:node:stackingOrder = 136
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2.15625, 47.203125)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (147, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 108

            def Shader "Modulo"
            {
                uniform token info:id = "ND_modulo_float"
                float inputs:in1.connect = </Root/GridMaterial/ScalarLine.inputs:PositionScalar>
                float inputs:in2 = 1
                float inputs:in2.connect = </Root/GridMaterial/ScalarLine.inputs:ModuloValue>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-365.54688, -3.53125)
                float2 ui:nodegraph:node:size = (63, 38.5)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "Ifgreater"
            {
                uniform token info:id = "ND_ifgreater_float"
                float inputs:in1 = 1
                float inputs:in2
                float inputs:value1.connect = </Root/GridMaterial/ScalarLine/Modulo.outputs:out>
                float inputs:value2 = 0.01
                float inputs:value2.connect = </Root/GridMaterial/ScalarLine.inputs:IfLine>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-216.94922, 10.2265625)
                float2 ui:nodegraph:node:size = (109, 163)
                int ui:nodegraph:node:stackingOrder = 106
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
            }
        }

        def Shader "Max_1"
        {
            uniform token info:id = "ND_max_float"
            float inputs:in1.connect = </Root/GridMaterial/ScalarLine_1.outputs:DrawLine>
            float inputs:in2.connect = </Root/GridMaterial/ScalarLine_2.outputs:DrawLine>
            float outputs:out
            float2 ui:nodegraph:node:pos = (111.29297, 23.945312)
            float2 ui:nodegraph:node:size = (121.5, 53)
            int ui:nodegraph:node:stackingOrder = 134
        }

        def NodeGraph "ScalarLine_1"
        {
            float inputs:IfLine = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-553.51953, 132.47266)
                        float2 sizeInSubgraph = (102.5, 53)
                        int stackingOrderInSubgraph = 107
                    }
                }
            )
            float inputs:IfLine.connect = </Root/GridMaterial/If_Value.outputs:out>
            float inputs:ModuloValue = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-569.7422, 54.359375)
                        float2 sizeInSubgraph = (148, 53)
                        int stackingOrderInSubgraph = 104
                    }
                }
            )
            float inputs:ModuloValue.connect = </Root/GridMaterial/Modulo_Value.outputs:out>
            float inputs:PositionScalar = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-571.3867, -21.273438)
                        float2 sizeInSubgraph = (157, 53)
                        int stackingOrderInSubgraph = 106
                    }
                }
            )
            float inputs:PositionScalar.connect = </Root/GridMaterial/Separate3.outputs:outy>
            float outputs:DrawLine.connect = </Root/GridMaterial/ScalarLine_1/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (-158.76562, 37.835938)
            float2 ui:nodegraph:node:size = (129.5, 145)
            int ui:nodegraph:node:stackingOrder = 118
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2.15625, 47.203125)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (147, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 108

            def Shader "Modulo"
            {
                uniform token info:id = "ND_modulo_float"
                float inputs:in1.connect = </Root/GridMaterial/ScalarLine_1.inputs:PositionScalar>
                float inputs:in2 = 1
                float inputs:in2.connect = </Root/GridMaterial/ScalarLine_1.inputs:ModuloValue>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-365.54688, -3.53125)
                float2 ui:nodegraph:node:size = (63, 38.5)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "Ifgreater"
            {
                uniform token info:id = "ND_ifgreater_float"
                float inputs:in1 = 1
                float inputs:in2
                float inputs:value1.connect = </Root/GridMaterial/ScalarLine_1/Modulo.outputs:out>
                float inputs:value2 = 0.01
                float inputs:value2.connect = </Root/GridMaterial/ScalarLine_1.inputs:IfLine>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-216.94922, 10.2265625)
                float2 ui:nodegraph:node:size = (109, 163)
                int ui:nodegraph:node:stackingOrder = 106
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
            }
        }

        def NodeGraph "ScalarLine_2"
        {
            float inputs:IfLine = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-553.51953, 132.47266)
                        float2 sizeInSubgraph = (102.5, 53)
                        int stackingOrderInSubgraph = 107
                    }
                }
            )
            float inputs:IfLine.connect = </Root/GridMaterial/If_Value.outputs:out>
            float inputs:ModuloValue = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-569.7422, 54.359375)
                        float2 sizeInSubgraph = (148, 53)
                        int stackingOrderInSubgraph = 104
                    }
                }
            )
            float inputs:ModuloValue.connect = </Root/GridMaterial/Modulo_Value.outputs:out>
            float inputs:PositionScalar = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-571.3867, -21.273438)
                        float2 sizeInSubgraph = (157, 53)
                        int stackingOrderInSubgraph = 106
                    }
                }
            )
            float inputs:PositionScalar.connect = </Root/GridMaterial/Separate3.outputs:outz>
            float outputs:DrawLine.connect = </Root/GridMaterial/ScalarLine_2/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (-159.17578, 196.78516)
            float2 ui:nodegraph:node:size = (132.5, 145)
            int ui:nodegraph:node:stackingOrder = 121
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2.15625, 47.203125)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (147, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 108

            def Shader "Modulo"
            {
                uniform token info:id = "ND_modulo_float"
                float inputs:in1.connect = </Root/GridMaterial/ScalarLine_2.inputs:PositionScalar>
                float inputs:in2 = 1
                float inputs:in2.connect = </Root/GridMaterial/ScalarLine_2.inputs:ModuloValue>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-365.54688, -3.53125)
                float2 ui:nodegraph:node:size = (63, 38.5)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "Ifgreater"
            {
                uniform token info:id = "ND_ifgreater_float"
                float inputs:in1 = 1
                float inputs:in2
                float inputs:value1.connect = </Root/GridMaterial/ScalarLine_2/Modulo.outputs:out>
                float inputs:value2 = 0.01
                float inputs:value2.connect = </Root/GridMaterial/ScalarLine_2.inputs:IfLine>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-216.94922, 10.2265625)
                float2 ui:nodegraph:node:size = (109, 163)
                int ui:nodegraph:node:stackingOrder = 106
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
            }
        }

        def Shader "IfEqual"
        {
            uniform token info:id = "ND_ifequal_color3"
            color3f inputs:in1 = (0, 0, 0) (
                colorSpace = "srgb_displayp3"
            )
            color3f inputs:in2 = (1, 1, 1) (
                colorSpace = "srgb_displayp3"
            )
            float inputs:value1.connect = </Root/GridMaterial/Max.outputs:out>
            float inputs:value2 = 1
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (284.1328, -26.410156)
            float2 ui:nodegraph:node:size = (109, 163)
            int ui:nodegraph:node:stackingOrder = 133
        }
    }

    def Material "Material"
    {
        prepend token outputs:mtlx:surface.connect = </Root/Material/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex.connect = </Root/Material/GeometryModifier.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor = (1, 0.14913142, 0) (
                colorSpace = "srgb_texture"
            )
            float inputs:metallic
            float3 inputs:normal
            float inputs:opacity = 0.1
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (32.53125, -53.33203)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 18
        }

        def Shader "PreviewSurface_1"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float2 ui:nodegraph:node:pos = (-617.77734, -167.8789)
            float2 ui:nodegraph:node:size = (161, 199)
            int ui:nodegraph:node:stackingOrder = 17
        }
    }

    def Material "RippleMaterial"
    {
        prepend token outputs:mtlx:surface.connect = </Root/RippleMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex.connect = </Root/RippleMaterial/GeometryModifier.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor = (1, 0.18, 0.18) (
                colorSpace = "lin_srgb"
            )
            token outputs:out
            float2 ui:nodegraph:node:pos = (53.023438, -74.39453)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 39
        }

        def Shader "GeometryModifier"
        {
            uniform token info:id = "ND_realitykit_geometrymodifier_vertexshader"
            color4f inputs:color
            float3 inputs:modelPositionOffset.connect = </Root/RippleMaterial/CrossProduct.outputs:out>
            float3 inputs:normal
            half2 inputs:userAttributeHalf2_0
            half2 inputs:userAttributeHalf2_1
            token outputs:out
            float2 ui:nodegraph:node:pos = (64.44141, 225.21094)
            float2 ui:nodegraph:node:size = (196.5, 325)
            int ui:nodegraph:node:stackingOrder = 16
        }

        def Shader "CrossProduct"
        {
            uniform token info:id = "ND_crossproduct_vector3"
            float3 inputs:in1.connect = </Root/RippleMaterial/Noise3D.outputs:out>
            float3 inputs:in2.connect = </Root/RippleMaterial/Normal.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-204.19531, 74.03125)
            float2 ui:nodegraph:node:size = (168.5, 53)
            int ui:nodegraph:node:stackingOrder = 41
        }

        def Shader "Normal"
        {
            uniform token info:id = "ND_normal_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-377.01953, 160.96484)
            float2 ui:nodegraph:node:size = (128.5, 40)
            int ui:nodegraph:node:stackingOrder = 52
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-811.8828, 85.89844)
            float2 ui:nodegraph:node:size = (133.5, 40)
            int ui:nodegraph:node:stackingOrder = 711
        }

        def Shader "Noise3D"
        {
            uniform token info:id = "ND_noise3d_vector3FA"
            float inputs:amplitude = 0.1
            float inputs:amplitude.connect = None
            float inputs:pivot.connect = None
            float3 inputs:position.connect = </Root/RippleMaterial/Add.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-440.40625, 24.746094)
            float2 ui:nodegraph:node:size = (105, 145)
            int ui:nodegraph:node:stackingOrder = 603
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:amplitude"]
        }

        def Shader "Time_1"
        {
            uniform token info:id = "ND_time_float"
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1095.8125, -41.1875)
            float2 ui:nodegraph:node:size = (122.5, 53)
            int ui:nodegraph:node:stackingOrder = 711
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector3"
            float3 inputs:in1.connect = </Root/RippleMaterial/Combine3.outputs:out>
            float3 inputs:in2.connect = </Root/RippleMaterial/Position.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-641.9297, 55.164062)
            float2 ui:nodegraph:node:size = (61.5, 36.5)
            int ui:nodegraph:node:stackingOrder = 711
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1.connect = </Root/RippleMaterial/Divide.outputs:out>
            float inputs:in2.connect = </Root/RippleMaterial/Divide.outputs:out>
            float inputs:in3.connect = </Root/RippleMaterial/Divide.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-816.1172, -33.785156)
            float2 ui:nodegraph:node:size = (145, 54)
            int ui:nodegraph:node:stackingOrder = 711
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/RippleMaterial/Time_1.outputs:out>
            float inputs:in2 = 4
            float outputs:out
            float2 ui:nodegraph:node:pos = (-963.1367, -37.375)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 711
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
        }
    }

    def Material "ProximityMaterial"
    {
        reorder nameChildren = ["PreviewSurface", "CameraPosition", "Range", "Clamp", "Divide", "Constant", "Separate3", "Range_1", "Range_2", "ColorRangeMap", "Distance3", "Position", "Combine3"]
        prepend token outputs:mtlx:surface.connect = </Root/ProximityMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (492.8789, 132.33984)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 740

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/ProximityMaterial/Switch.outputs:out>
            float inputs:metallic
            float inputs:opacity
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (276.80078, 54.476562)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 740
        }

        def NodeGraph "Distance3"
        {
            float3 inputs:A = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-391.97266, -47.42578)
                        float2 sizeInSubgraph = (139, 53)
                        int stackingOrderInSubgraph = 34
                    }
                }
            )
            float3 inputs:A.connect = </Root/ProximityMaterial/CameraPosition.outputs:out>
            float3 inputs:B = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-402.53125, 98.90234)
                        float2 sizeInSubgraph = (139, 53)
                        int stackingOrderInSubgraph = 41
                    }
                }
            )
            float3 inputs:B.connect = </Root/ProximityMaterial/Position.outputs:out>
            float outputs:Distance (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 0
                    }
                }
            )
            float outputs:Distance.connect = </Root/ProximityMaterial/Distance3/Sqrt.outputs:out>
            float2 ui:nodegraph:node:pos = (-697.3867, -69.34766)
            float2 ui:nodegraph:node:size = (115, 127)
            int ui:nodegraph:node:stackingOrder = 950
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (436.54688, 47.246094)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (141.5, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 26

            def NodeGraph "Factor"
            {
                float inputs:A = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-502.35938, 77.85156)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 13
                        }
                    }
                )
                float inputs:A.connect = </Root/ProximityMaterial/Distance3/Separate3.outputs:outx>
                float inputs:B = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-499.97266, 151.96875)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 17
                        }
                    }
                )
                float inputs:B.connect = </Root/ProximityMaterial/Distance3/Separate3_1.outputs:outx>
                float outputs:Factor (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 0
                        }
                    }
                )
                float outputs:Factor.connect = </Root/ProximityMaterial/Distance3/Factor/Power.outputs:out>
                float2 ui:nodegraph:node:pos = (-51.921875, -27.351562)
                float2 ui:nodegraph:node:size = (105.5, 127)
                int ui:nodegraph:node:stackingOrder = 40
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 86.5)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (130, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 12

                def Shader "Power"
                {
                    uniform token info:id = "ND_power_float"
                    float inputs:in1.connect = </Root/ProximityMaterial/Distance3/Factor/Subtract.outputs:out>
                    float inputs:in2 = 2
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-191.96875, 112.41406)
                    float2 ui:nodegraph:node:size = (123.5, 40)
                    int ui:nodegraph:node:stackingOrder = 5
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1.connect = </Root/ProximityMaterial/Distance3/Factor.inputs:A>
                    float inputs:in2.connect = </Root/ProximityMaterial/Distance3/Factor.inputs:B>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-346.79688, 101.63281)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 11
                }
            }

            def Shader "Sqrt"
            {
                uniform token info:id = "ND_sqrt_float"
                float inputs:in.connect = </Root/ProximityMaterial/Distance3/Add.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (243.58984, 73.6875)
                float2 ui:nodegraph:node:size = (143.5, 53)
                int ui:nodegraph:node:stackingOrder = 9
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/ProximityMaterial/Distance3/Factor.outputs:Factor>
                float inputs:in2.connect = </Root/ProximityMaterial/Distance3/Add_1.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (108.91406, 70.13672)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 12
            }

            def Shader "Add_1"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/ProximityMaterial/Distance3/Factor_1.outputs:Factor>
                float inputs:in2.connect = </Root/ProximityMaterial/Distance3/Factor_2.outputs:Factor>
                float outputs:out
                float2 ui:nodegraph:node:pos = (112.26953, 135.13672)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 15
            }

            def NodeGraph "Factor_1"
            {
                float inputs:A = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-502.35938, 77.85156)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 13
                        }
                    }
                )
                float inputs:A.connect = </Root/ProximityMaterial/Distance3/Separate3.outputs:outy>
                float inputs:B = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-499.97266, 151.96875)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 17
                        }
                    }
                )
                float inputs:B.connect = </Root/ProximityMaterial/Distance3/Separate3_1.outputs:outy>
                float outputs:Factor (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 0
                        }
                    }
                )
                float outputs:Factor.connect = </Root/ProximityMaterial/Distance3/Factor_1/Power.outputs:out>
                float2 ui:nodegraph:node:pos = (-53.171875, 115.19531)
                float2 ui:nodegraph:node:size = (105.5, 127)
                int ui:nodegraph:node:stackingOrder = 21
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 86.5)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (130, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 12

                def Shader "Power"
                {
                    uniform token info:id = "ND_power_float"
                    float inputs:in1.connect = </Root/ProximityMaterial/Distance3/Factor_1/Subtract.outputs:out>
                    float inputs:in2 = 2
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-191.96875, 112.41406)
                    float2 ui:nodegraph:node:size = (123.5, 40)
                    int ui:nodegraph:node:stackingOrder = 5
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1.connect = </Root/ProximityMaterial/Distance3/Factor_1.inputs:A>
                    float inputs:in2.connect = </Root/ProximityMaterial/Distance3/Factor_1.inputs:B>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-346.79688, 101.63281)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 11
                }
            }

            def NodeGraph "Factor_2"
            {
                float inputs:A = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-502.35938, 77.85156)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 13
                        }
                    }
                )
                float inputs:A.connect = </Root/ProximityMaterial/Distance3/Separate3.outputs:outz>
                float inputs:B = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-499.97266, 151.96875)
                            float2 sizeInSubgraph = (98, 53)
                            int stackingOrderInSubgraph = 17
                        }
                    }
                )
                float inputs:B.connect = </Root/ProximityMaterial/Distance3/Separate3_1.outputs:outz>
                float outputs:Factor (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 0
                        }
                    }
                )
                float outputs:Factor.connect = </Root/ProximityMaterial/Distance3/Factor_2/Power.outputs:out>
                float2 ui:nodegraph:node:pos = (-53.23047, 255.32031)
                float2 ui:nodegraph:node:size = (107, 127)
                int ui:nodegraph:node:stackingOrder = 25
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 86.5)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (130, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 12

                def Shader "Power"
                {
                    uniform token info:id = "ND_power_float"
                    float inputs:in1.connect = </Root/ProximityMaterial/Distance3/Factor_2/Subtract.outputs:out>
                    float inputs:in2 = 2
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-191.96875, 112.41406)
                    float2 ui:nodegraph:node:size = (123.5, 40)
                    int ui:nodegraph:node:stackingOrder = 5
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1.connect = </Root/ProximityMaterial/Distance3/Factor_2.inputs:A>
                    float inputs:in2.connect = </Root/ProximityMaterial/Distance3/Factor_2.inputs:B>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-346.79688, 101.63281)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 11
                }
            }

            def Shader "Separate3"
            {
                uniform token info:id = "ND_separate3_vector3"
                float3 inputs:in.connect = </Root/ProximityMaterial/Distance3.inputs:A>
                float outputs:outx
                float outputs:outy
                float outputs:outz
                float2 ui:nodegraph:node:pos = (-219.08984, -41.839844)
                float2 ui:nodegraph:node:size = (115.5, 145)
                int ui:nodegraph:node:stackingOrder = 32
            }

            def Shader "Separate3_1"
            {
                uniform token info:id = "ND_separate3_vector3"
                float3 inputs:in.connect = </Root/ProximityMaterial/Distance3.inputs:B>
                float outputs:outx
                float outputs:outy
                float outputs:outz
                float2 ui:nodegraph:node:pos = (-220.71484, 109.68359)
                float2 ui:nodegraph:node:size = (127.5, 145)
                int ui:nodegraph:node:stackingOrder = 39
            }
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-942.41406, 16.828125)
            float2 ui:nodegraph:node:size = (133.5, 40)
            int ui:nodegraph:node:stackingOrder = 950
        }

        def Shader "CameraPosition"
        {
            uniform token info:id = "ND_realitykit_cameraposition_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-925.1172, -91.78516)
            float2 ui:nodegraph:node:size = (218.5, 53)
            int ui:nodegraph:node:stackingOrder = 950
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high = 3
            float inputs:in.connect = None
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (-278.54297, -286.05078)
            float2 ui:nodegraph:node:size = (91, 145)
            int ui:nodegraph:node:stackingOrder = 858
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/ProximityMaterial/Clamp.outputs:out>
            float inputs:in2 = 3
            float outputs:out
            float2 ui:nodegraph:node:pos = (-175.72266, -223.5625)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 858
        }

        def NodeGraph "ColorRangeMap"
        {
            color3f inputs:ColorHigh = (0.07063912, 1, 0.16796507) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-746.5078, 55.890625)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 632
                    }
                }
            )
            color3f inputs:ColorHigh.connect = </Root/ProximityMaterial/Constant.outputs:out>
            color3f inputs:ColorLow = (1, 0.9056092, 0.0599237) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-760.6406, -138.13672)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 768
                    }
                }
            )
            color3f inputs:ColorLow.connect = </Root/ProximityMaterial/Constant_1.outputs:out>
            float inputs:Distance = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-762.96094, -261.42578)
                        float2 sizeInSubgraph = (122.5, 53)
                        int stackingOrderInSubgraph = 764
                    }
                }
            )
            float inputs:Distance.connect = </Root/ProximityMaterial/Distance3.outputs:Distance>
            float inputs:Max = 2 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-764.8828, 153.64453)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 768
                    }
                }
            )
            color3f outputs:Color (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 0
                    }
                }
            )
            color3f outputs:Color.connect = </Root/ProximityMaterial/ColorRangeMap/Combine3.outputs:out>
            float2 ui:nodegraph:node:pos = (-226.27344, -204.10547)
            float2 ui:nodegraph:node:size = (151.5, 163)
            int ui:nodegraph:node:stackingOrder = 960
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (125.30469, 94.09375)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (172, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 639

            def Shader "Separate3"
            {
                uniform token info:id = "ND_separate3_color3"
                color3f inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap.inputs:ColorLow>
                float outputs:outb
                float outputs:outg
                float outputs:outr
                float2 ui:nodegraph:node:pos = (-512.5664, -125.64636)
                float2 ui:nodegraph:node:size = (115.5, 145)
                int ui:nodegraph:node:stackingOrder = 629
            }

            def Shader "Range"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap/Separate3_1.outputs:outr>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap/Separate3.outputs:outr>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-305.70312, -63.26953)
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 766
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Range_1"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap/Separate3_1.outputs:outg>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap/Separate3.outputs:outg>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-301.3047, 167.27344)
                float2 ui:nodegraph:node:size = (103.5, 217)
                int ui:nodegraph:node:stackingOrder = 765
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Range_2"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap/Separate3_1.outputs:outb>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap/Separate3.outputs:outb>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-299.98438, 396.9375)
                float2 ui:nodegraph:node:size = (107, 217)
                int ui:nodegraph:node:stackingOrder = 628
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Separate3_1"
            {
                uniform token info:id = "ND_separate3_color3"
                color3f inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap.inputs:ColorHigh>
                float outputs:outb
                float outputs:outg
                float outputs:outr
                float2 ui:nodegraph:node:pos = (-507.9297, 82.55286)
                float2 ui:nodegraph:node:size = (127.5, 145)
                int ui:nodegraph:node:stackingOrder = 634
            }

            def Shader "Combine3"
            {
                uniform token info:id = "ND_combine3_color3"
                float inputs:in1.connect = </Root/ProximityMaterial/ColorRangeMap/Range.outputs:out>
                float inputs:in2.connect = </Root/ProximityMaterial/ColorRangeMap/Range_1.outputs:out>
                float inputs:in3.connect = </Root/ProximityMaterial/ColorRangeMap/Range_2.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-97.84766, 121.56641)
                float2 ui:nodegraph:node:size = (145, 54)
                int ui:nodegraph:node:stackingOrder = 637
            }
        }

        def Shader "Switch"
        {
            uniform token info:id = "ND_switch_color3"
            color3f inputs:in1.connect = </Root/ProximityMaterial/ColorRangeMap.outputs:Color>
            color3f inputs:in2.connect = </Root/ProximityMaterial/ColorRangeMap.outputs:Color>
            color3f inputs:in3.connect = </Root/ProximityMaterial/ColorRangeMap_1.outputs:Color>
            color3f inputs:in4.connect = </Root/ProximityMaterial/ColorRangeMap_2.outputs:Color>
            color3f inputs:in5.connect = </Root/ProximityMaterial/ColorRangeMap_3.outputs:Color>
            color3f inputs:in6.connect = </Root/ProximityMaterial/ColorRangeMap_4.outputs:Color>
            color3f inputs:in7.connect = </Root/ProximityMaterial/ColorRangeMap_4.outputs:Color>
            color3f inputs:in8.connect = </Root/ProximityMaterial/ColorRangeMap_4.outputs:Color>
            color3f inputs:in9.connect = </Root/ProximityMaterial/ColorRangeMap_4.outputs:Color>
            color3f inputs:in10.connect = </Root/ProximityMaterial/ColorRangeMap_4.outputs:Color>
            prepend float inputs:which.connect = </Root/ProximityMaterial/Distance3.outputs:Distance>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (37.289497, -44.099133)
            float2 ui:nodegraph:node:size = (94, 289)
            int ui:nodegraph:node:stackingOrder = 1033
        }

        def NodeGraph "ColorRangeMap_1"
        {
            color3f inputs:ColorHigh = (0.07063912, 1, 0.16796507) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-746.5078, 55.890625)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 632
                    }
                }
            )
            color3f inputs:ColorHigh.connect = </Root/ProximityMaterial/Constant_2.outputs:out>
            color3f inputs:ColorLow = (1, 0.9056092, 0.0599237) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-760.6406, -138.13672)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 768
                    }
                }
            )
            color3f inputs:ColorLow.connect = </Root/ProximityMaterial/Constant.outputs:out>
            float inputs:Distance = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-762.96094, -261.42578)
                        float2 sizeInSubgraph = (122.5, 53)
                        int stackingOrderInSubgraph = 764
                    }
                }
            )
            float inputs:Distance.connect = </Root/ProximityMaterial/Subtract.outputs:out>
            float inputs:Max = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-764.8828, 153.64453)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 768
                    }
                }
            )
            color3f outputs:Color (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 0
                    }
                }
            )
            color3f outputs:Color.connect = </Root/ProximityMaterial/ColorRangeMap_1/Combine3.outputs:out>
            float2 ui:nodegraph:node:pos = (-220.1914, -37.027344)
            float2 ui:nodegraph:node:size = (163.5, 163)
            int ui:nodegraph:node:stackingOrder = 978
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (125.30469, 94.09375)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (172.33144, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 639

            def Shader "Separate3"
            {
                uniform token info:id = "ND_separate3_color3"
                color3f inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_1.inputs:ColorLow>
                float outputs:outb
                float outputs:outg
                float outputs:outr
                float2 ui:nodegraph:node:pos = (-512.5664, -125.64636)
                float2 ui:nodegraph:node:size = (115.5, 145)
                int ui:nodegraph:node:stackingOrder = 629
            }

            def Shader "Range"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_1.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_1.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_1/Separate3_1.outputs:outr>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_1/Separate3.outputs:outr>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-305.70312, -63.26953)
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 766
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Range_1"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_1.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_1.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_1/Separate3_1.outputs:outg>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_1/Separate3.outputs:outg>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-301.3047, 167.27344)
                float2 ui:nodegraph:node:size = (103.5, 217)
                int ui:nodegraph:node:stackingOrder = 765
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Range_2"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_1.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_1.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_1/Separate3_1.outputs:outb>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_1/Separate3.outputs:outb>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-299.98438, 396.9375)
                float2 ui:nodegraph:node:size = (107, 217)
                int ui:nodegraph:node:stackingOrder = 628
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Separate3_1"
            {
                uniform token info:id = "ND_separate3_color3"
                color3f inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_1.inputs:ColorHigh>
                float outputs:outb
                float outputs:outg
                float outputs:outr
                float2 ui:nodegraph:node:pos = (-507.9297, 82.55286)
                float2 ui:nodegraph:node:size = (127.5, 145)
                int ui:nodegraph:node:stackingOrder = 634
            }

            def Shader "Combine3"
            {
                uniform token info:id = "ND_combine3_color3"
                float inputs:in1.connect = </Root/ProximityMaterial/ColorRangeMap_1/Range.outputs:out>
                float inputs:in2.connect = </Root/ProximityMaterial/ColorRangeMap_1/Range_1.outputs:out>
                float inputs:in3.connect = </Root/ProximityMaterial/ColorRangeMap_1/Range_2.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-97.84766, 121.56641)
                float2 ui:nodegraph:node:size = (145, 54)
                int ui:nodegraph:node:stackingOrder = 637
            }
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/ProximityMaterial/Distance3.outputs:Distance>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-349.04688, -17.003906)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 987
        }

        def Shader "Constant"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (0.059735052, 1, 0.09571257) (
                colorSpace = "srgb_displayp3"
            )
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-472.8047, -185.25781)
            float2 ui:nodegraph:node:size = (151, 53)
            int ui:nodegraph:node:stackingOrder = 964
        }

        def Shader "Constant_1"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (0.9804536, 1, 0.04735655) (
                colorSpace = "srgb_displayp3"
            )
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-469.52734, -253.69531)
            float2 ui:nodegraph:node:size = (155, 53)
            int ui:nodegraph:node:stackingOrder = 966
        }

        def Shader "Constant_2"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (0.07168328, 1, 0.99634296) (
                colorSpace = "srgb_displayp3"
            )
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-477.8789, -107.19531)
            float2 ui:nodegraph:node:size = (158.5, 53)
            int ui:nodegraph:node:stackingOrder = 980
        }

        def Shader "Constant_3"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (0.059826113, 0.10845829, 1) (
                colorSpace = "srgb_displayp3"
            )
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-477.5039, 66.26172)
            float2 ui:nodegraph:node:size = (158, 53)
            int ui:nodegraph:node:stackingOrder = 1007
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/ProximityMaterial/Distance3.outputs:Distance>
            float inputs:in2 = 3
            float outputs:out
            float2 ui:nodegraph:node:pos = (-348.67188, 156.45312)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 1003
        }

        def NodeGraph "ColorRangeMap_2"
        {
            color3f inputs:ColorHigh = (0.07063912, 1, 0.16796507) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-746.5078, 55.890625)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 632
                    }
                }
            )
            color3f inputs:ColorHigh.connect = </Root/ProximityMaterial/Constant_3.outputs:out>
            color3f inputs:ColorLow = (1, 0.9056092, 0.0599237) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-760.6406, -138.13672)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 768
                    }
                }
            )
            color3f inputs:ColorLow.connect = </Root/ProximityMaterial/Constant_2.outputs:out>
            float inputs:Distance = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-762.96094, -261.42578)
                        float2 sizeInSubgraph = (122.5, 53)
                        int stackingOrderInSubgraph = 764
                    }
                }
            )
            float inputs:Distance.connect = </Root/ProximityMaterial/Subtract_1.outputs:out>
            float inputs:Max = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-764.8828, 153.64453)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 768
                    }
                }
            )
            color3f outputs:Color (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 0
                    }
                }
            )
            color3f outputs:Color.connect = </Root/ProximityMaterial/ColorRangeMap_2/Combine3.outputs:out>
            float2 ui:nodegraph:node:pos = (-219.8164, 136.42969)
            float2 ui:nodegraph:node:size = (167, 163)
            int ui:nodegraph:node:stackingOrder = 990
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (125.30469, 94.09375)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (172.40796, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 639

            def Shader "Separate3"
            {
                uniform token info:id = "ND_separate3_color3"
                color3f inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_2.inputs:ColorLow>
                float outputs:outb
                float outputs:outg
                float outputs:outr
                float2 ui:nodegraph:node:pos = (-512.5664, -125.64636)
                float2 ui:nodegraph:node:size = (115.5, 145)
                int ui:nodegraph:node:stackingOrder = 629
            }

            def Shader "Range"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_2.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_2.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_2/Separate3_1.outputs:outr>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_2/Separate3.outputs:outr>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-305.70312, -63.26953)
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 766
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Range_1"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_2.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_2.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_2/Separate3_1.outputs:outg>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_2/Separate3.outputs:outg>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-301.3047, 167.27344)
                float2 ui:nodegraph:node:size = (103.5, 217)
                int ui:nodegraph:node:stackingOrder = 765
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Range_2"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_2.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_2.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_2/Separate3_1.outputs:outb>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_2/Separate3.outputs:outb>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-299.98438, 396.9375)
                float2 ui:nodegraph:node:size = (107, 217)
                int ui:nodegraph:node:stackingOrder = 628
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Separate3_1"
            {
                uniform token info:id = "ND_separate3_color3"
                color3f inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_2.inputs:ColorHigh>
                float outputs:outb
                float outputs:outg
                float outputs:outr
                float2 ui:nodegraph:node:pos = (-507.9297, 82.55286)
                float2 ui:nodegraph:node:size = (127.5, 145)
                int ui:nodegraph:node:stackingOrder = 634
            }

            def Shader "Combine3"
            {
                uniform token info:id = "ND_combine3_color3"
                float inputs:in1.connect = </Root/ProximityMaterial/ColorRangeMap_2/Range.outputs:out>
                float inputs:in2.connect = </Root/ProximityMaterial/ColorRangeMap_2/Range_1.outputs:out>
                float inputs:in3.connect = </Root/ProximityMaterial/ColorRangeMap_2/Range_2.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-97.84766, 121.56641)
                float2 ui:nodegraph:node:size = (145, 54)
                int ui:nodegraph:node:stackingOrder = 637
            }
        }

        def Shader "Subtract_2"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/ProximityMaterial/Distance3.outputs:Distance>
            float inputs:in2 = 4
            float outputs:out
            float2 ui:nodegraph:node:pos = (-347.58203, 328.41986)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 1026
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
        }

        def NodeGraph "ColorRangeMap_3"
        {
            color3f inputs:ColorHigh = (0.07063912, 1, 0.16796507) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-746.5078, 55.890625)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 632
                    }
                }
            )
            color3f inputs:ColorHigh.connect = </Root/ProximityMaterial/Constant_4.outputs:out>
            color3f inputs:ColorLow = (1, 0.9056092, 0.0599237) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-760.6406, -138.13672)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 768
                    }
                }
            )
            color3f inputs:ColorLow.connect = </Root/ProximityMaterial/Constant_3.outputs:out>
            float inputs:Distance = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-762.96094, -261.42578)
                        float2 sizeInSubgraph = (122.5, 53)
                        int stackingOrderInSubgraph = 764
                    }
                }
            )
            float inputs:Distance.connect = </Root/ProximityMaterial/Subtract_2.outputs:out>
            float inputs:Max = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-764.8828, 153.64453)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 768
                    }
                }
            )
            color3f outputs:Color (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 0
                    }
                }
            )
            color3f outputs:Color.connect = </Root/ProximityMaterial/ColorRangeMap_3/Combine3.outputs:out>
            float2 ui:nodegraph:node:pos = (-217.8164, 306.5058)
            float2 ui:nodegraph:node:size = (166.5, 163)
            int ui:nodegraph:node:stackingOrder = 1009
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (125.30469, 94.09375)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (172.33144, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 639

            def Shader "Separate3"
            {
                uniform token info:id = "ND_separate3_color3"
                color3f inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_3.inputs:ColorLow>
                float outputs:outb
                float outputs:outg
                float outputs:outr
                float2 ui:nodegraph:node:pos = (-512.5664, -125.64636)
                float2 ui:nodegraph:node:size = (115.5, 145)
                int ui:nodegraph:node:stackingOrder = 629
            }

            def Shader "Range"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_3.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_3.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_3/Separate3_1.outputs:outr>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_3/Separate3.outputs:outr>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-305.70312, -63.26953)
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 766
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Range_1"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_3.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_3.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_3/Separate3_1.outputs:outg>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_3/Separate3.outputs:outg>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-301.3047, 167.27344)
                float2 ui:nodegraph:node:size = (103.5, 217)
                int ui:nodegraph:node:stackingOrder = 765
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Range_2"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_3.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_3.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_3/Separate3_1.outputs:outb>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_3/Separate3.outputs:outb>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-299.98438, 396.9375)
                float2 ui:nodegraph:node:size = (107, 217)
                int ui:nodegraph:node:stackingOrder = 628
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Separate3_1"
            {
                uniform token info:id = "ND_separate3_color3"
                color3f inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_3.inputs:ColorHigh>
                float outputs:outb
                float outputs:outg
                float outputs:outr
                float2 ui:nodegraph:node:pos = (-507.9297, 82.55286)
                float2 ui:nodegraph:node:size = (127.5, 145)
                int ui:nodegraph:node:stackingOrder = 634
            }

            def Shader "Combine3"
            {
                uniform token info:id = "ND_combine3_color3"
                float inputs:in1.connect = </Root/ProximityMaterial/ColorRangeMap_3/Range.outputs:out>
                float inputs:in2.connect = </Root/ProximityMaterial/ColorRangeMap_3/Range_1.outputs:out>
                float inputs:in3.connect = </Root/ProximityMaterial/ColorRangeMap_3/Range_2.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-97.84766, 121.56641)
                float2 ui:nodegraph:node:size = (145, 54)
                int ui:nodegraph:node:stackingOrder = 637
            }
        }

        def Shader "Constant_4"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (0.99608946, 0.05363663, 1) (
                colorSpace = "srgb_displayp3"
            )
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-476.41406, 238.22845)
            float2 ui:nodegraph:node:size = (158, 53)
            int ui:nodegraph:node:stackingOrder = 1011
        }

        def Shader "Subtract_3"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/ProximityMaterial/Distance3.outputs:Distance>
            float inputs:in2 = 5
            float outputs:out
            float2 ui:nodegraph:node:pos = (-454.1914, 502.66595)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 1029
        }

        def NodeGraph "ColorRangeMap_4"
        {
            color3f inputs:ColorHigh = (0.07063912, 1, 0.16796507) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-746.5078, 55.890625)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 632
                    }
                }
            )
            color3f inputs:ColorHigh.connect = </Root/ProximityMaterial/Constant_5.outputs:out>
            color3f inputs:ColorLow = (1, 0.9056092, 0.0599237) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-760.6406, -138.13672)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 768
                    }
                }
            )
            color3f inputs:ColorLow.connect = </Root/ProximityMaterial/Constant_4.outputs:out>
            float inputs:Distance = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-762.96094, -261.42578)
                        float2 sizeInSubgraph = (122.5, 53)
                        int stackingOrderInSubgraph = 764
                    }
                }
            )
            float inputs:Distance.connect = </Root/ProximityMaterial/Divide_1.outputs:out>
            float inputs:Max = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-764.8828, 153.64453)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 768
                    }
                }
            )
            color3f outputs:Color (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 0
                    }
                }
            )
            color3f outputs:Color.connect = </Root/ProximityMaterial/ColorRangeMap_4/Combine3.outputs:out>
            float2 ui:nodegraph:node:pos = (-217.42578, 475.90033)
            float2 ui:nodegraph:node:size = (166.5, 163)
            int ui:nodegraph:node:stackingOrder = 1017
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:ColorHigh"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (125.30469, 94.09375)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (172.33144, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 639

            def Shader "Separate3"
            {
                uniform token info:id = "ND_separate3_color3"
                color3f inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_4.inputs:ColorLow>
                float outputs:outb
                float outputs:outg
                float outputs:outr
                float2 ui:nodegraph:node:pos = (-512.5664, -125.64636)
                float2 ui:nodegraph:node:size = (115.5, 145)
                int ui:nodegraph:node:stackingOrder = 629
            }

            def Shader "Range"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_4.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_4.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_4/Separate3_1.outputs:outr>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_4/Separate3.outputs:outr>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-305.70312, -63.26953)
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 766
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Range_1"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_4.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_4.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_4/Separate3_1.outputs:outg>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_4/Separate3.outputs:outg>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-301.3047, 167.27344)
                float2 ui:nodegraph:node:size = (103.5, 217)
                int ui:nodegraph:node:stackingOrder = 765
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Range_2"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 0
                float inputs:gamma
                float inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_4.inputs:Distance>
                float inputs:inhigh = 1
                float inputs:inhigh.connect = </Root/ProximityMaterial/ColorRangeMap_4.inputs:Max>
                float inputs:inlow
                float inputs:outhigh = 0
                float inputs:outhigh.connect = </Root/ProximityMaterial/ColorRangeMap_4/Separate3_1.outputs:outb>
                float inputs:outlow = 1
                float inputs:outlow.connect = </Root/ProximityMaterial/ColorRangeMap_4/Separate3.outputs:outb>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-299.98438, 396.9375)
                float2 ui:nodegraph:node:size = (107, 217)
                int ui:nodegraph:node:stackingOrder = 628
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:gamma"]
            }

            def Shader "Separate3_1"
            {
                uniform token info:id = "ND_separate3_color3"
                color3f inputs:in.connect = </Root/ProximityMaterial/ColorRangeMap_4.inputs:ColorHigh>
                float outputs:outb
                float outputs:outg
                float outputs:outr
                float2 ui:nodegraph:node:pos = (-507.9297, 82.55286)
                float2 ui:nodegraph:node:size = (127.5, 145)
                int ui:nodegraph:node:stackingOrder = 634
            }

            def Shader "Combine3"
            {
                uniform token info:id = "ND_combine3_color3"
                float inputs:in1.connect = </Root/ProximityMaterial/ColorRangeMap_4/Range.outputs:out>
                float inputs:in2.connect = </Root/ProximityMaterial/ColorRangeMap_4/Range_1.outputs:out>
                float inputs:in3.connect = </Root/ProximityMaterial/ColorRangeMap_4/Range_2.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-97.84766, 121.56641)
                float2 ui:nodegraph:node:size = (145, 54)
                int ui:nodegraph:node:stackingOrder = 637
            }
        }

        def Shader "Constant_5"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (0, 0, 0) (
                colorSpace = "srgb_displayp3"
            )
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-476.02344, 407.623)
            float2 ui:nodegraph:node:size = (158, 53)
            int ui:nodegraph:node:stackingOrder = 1020
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/ProximityMaterial/Subtract_3.outputs:out>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-375.7422, 502.3203)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 1028
        }
    }

    def Cube "TestPlane" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/ProximityMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float3 xformOp:scale = (10, 10, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/TestPlane/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }
}

